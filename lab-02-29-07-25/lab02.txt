// Q2.1 Passing member of the structure as an argument to a function

#include <stdio.h>

struct Student {
    char name[50];
    int roll;
};

void display(char [], int);

int main(){
    struct Student S1;
    printf("Enter Name ");
    scanf("%[^\n]s", S1.name);
    printf("Enter roll: ");
    scanf("%d", &S1.roll);

    display(S1.name, S1.roll);

    return 0;
}

void display(char a[], int b){
    printf("Name: %s", a);
    printf("\nRoll no. %d", b);
}


// Q2.2 return structure from a pointer

#include <stdio.h>

struct Person{
    char name[30];
    int age;
};

struct Person Employees();

int main(){
    struct Person pe = Employees();
    printf("Name = %s", pe.name);
    printf("Age = %d", pe.age);
    return 0;
}

struct Person Employees(){
    struct Person p;
    printf("Enter name: ");
    scanf("%s", p.name);
    printf("Enter age: ");
    scanf("%d", &p.age);
    return p;
}

// Q2.3 Pass structure by reference in C

#include <stdio.h>

struct Student {
    char name[50];
    int roll;
    char branch[30];
};

void display(struct Student *s);

int main(){
    struct Student S1;
    printf("Enter Name: ");
    scanf("%[^\n]s", S1.name);
    printf("Enter Roll: ");
    scanf("%d", &S1.roll);
    printf("Enter Branch: ");
    scanf("%s", S1.branch);

    display(&S1);

    return 0;
}

void display(struct Student *s){
    printf("Name: %s\n", s->name);
    printf("Roll: %d\n", s->roll);
    printf("Branch: %s\n", s->branch);
}

// Q2.4 Array of structures as fun arguments

#include <stdio.h>

struct student{
    char name[50];
    int roll;
};

void display(struct student st[]);

int main(){
    struct student stu[3] = {
        {"Atul", 1},
        {"Harsha", 2},
        {"SSP", 3}
    };
    display(stu);
    return 0;
}

void display(struct student st[]){
    for(int i=0; i<3; i++){
        printf("Name: %s\n", st[i].name);
        printf("Roll: %d\n", st[i].roll);
    }
}

// Q2.5 Structure variable as argument in C

#include <stdio.h>
struct point {
    int x;
    int y;
};

void display(struct point p){
    printf("Point coordinates: (%d, %d)\n", p.x, p.y);
}

int main(){
    struct point p1;
    printf("Enter x coordinate: ");
    scanf("%d", &p1.x);
    printf("Enter y coordinate: ");
    scanf("%d", &p1.y);

    display(p1);

    return 0;
}

// Q2.6 Passing struct variable as a reference

#include <stdio.h>

struct Point {
    int x;
    int y;
};

void display(struct Point *p) {
    printf("Point: (%d, %d)\n", p->x, p->y);
}

int main() {
    struct Point p1 = {10, 20};
    struct Point p2 = {30, 40};

    display(&p1);
    display(&p2);

    return 0;
}

// Q2.7 Return a pointer to a structure from the function

#include <stdio.h>
#include <stdlib.h>

struct point{
    int x;
    int y;
};

struct point *fxn (int a, int b){
    struct point *ptr = (struct point *)malloc(sizeof(struct point));

    ptr->x = a;
    ptr->y = b;

    return ptr;
}

void display(struct point *p){
    printf("Point: (%d, %d)\n", p->x, p->y);
}

int main() {
    struct point *p1 = fxn(10, 20);
    struct point *p2 = fxn(30, 40);

    display(p1);
    display(p2);

    free(p1);
    free(p2);

    return 0;
}