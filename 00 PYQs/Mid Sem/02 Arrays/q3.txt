3. Write a pseudocode / C-function that will add two Sparse matrix using suitable data-structure.

algo add_sparse(A, A_r, B, B_r)
// considering both sparse matrices are in triplet format
// A_r denotes row size & 
1. create C[A_r + B_r + 1][3]
2. create i = j = k = 1
3. C[0][0] = A[0][0]
4. C[0][1] = A[0][1]
// Set C[0][2] later
5. while (i < A_r and j < B_r)
    5.1. if(A[i][0] < B[j][0] || (A[i][0] == B[j][0] && A[i][1]<B[j][1]))
        5.1.1. C[k][0] = A[i][0];
        5.1.2. C[k][1] = A[i][1];
        5.1.3. C[k][2] = A[i][2];
        5.1.4. k++, i++
    5.2. else if (B[j][0] < A[i][0] || (B[j][0] == A[i][0] && B[j][1] < A[i][1]))
        5.2.1. C[k][0] = B[j][0];
        5.2.2. C[k][1] = B[j][1];
        5.2.3. C[k][2] = B[j][2];
        5.2.4. k++, j++
    5.3 else
        5.3.1. C[k][0] = A[i][0];
        5.3.2. C[k][1] = A[i][1];
        5.3.3. C[k][2] = A[i][2] + B[j][2];
        5.3.4. k++, i++, j++
// fill the left off values
6. while(i < A_r)
    6.1. C[k][0] = A[i][0];
    6.2. C[k][1] = A[i][1];
    6.3. C[k][2] = A[i][2];
    6.4. k++, i++
7. while (j < B_r)
    7.1 C[k][0] = B[j][0];
    7.2.C[k][1] = B[j][1];
    7.3 C[k][2] = B[j][2];
    7.4 k++, j++

8. C[0][2] = k-1;

9. Stop & Exit